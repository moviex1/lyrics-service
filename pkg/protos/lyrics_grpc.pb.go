// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lyrics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LyricsServiceClient is the client API for LyricsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LyricsServiceClient interface {
	GetAllLyrics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LyricsResponseList, error)
	GetLyricsBySongId(ctx context.Context, in *LyricsBySongIdRequest, opts ...grpc.CallOption) (*LyricsResponse, error)
	CreateLyrics(ctx context.Context, in *CreateLyricsRequest, opts ...grpc.CallOption) (*LyricsResponse, error)
	UpdateLyrics(ctx context.Context, in *UpdateLyricsRequest, opts ...grpc.CallOption) (*LyricsResponse, error)
}

type lyricsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLyricsServiceClient(cc grpc.ClientConnInterface) LyricsServiceClient {
	return &lyricsServiceClient{cc}
}

func (c *lyricsServiceClient) GetAllLyrics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LyricsResponseList, error) {
	out := new(LyricsResponseList)
	err := c.cc.Invoke(ctx, "/lyrics.LyricsService/GetAllLyrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lyricsServiceClient) GetLyricsBySongId(ctx context.Context, in *LyricsBySongIdRequest, opts ...grpc.CallOption) (*LyricsResponse, error) {
	out := new(LyricsResponse)
	err := c.cc.Invoke(ctx, "/lyrics.LyricsService/GetLyricsBySongId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lyricsServiceClient) CreateLyrics(ctx context.Context, in *CreateLyricsRequest, opts ...grpc.CallOption) (*LyricsResponse, error) {
	out := new(LyricsResponse)
	err := c.cc.Invoke(ctx, "/lyrics.LyricsService/CreateLyrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lyricsServiceClient) UpdateLyrics(ctx context.Context, in *UpdateLyricsRequest, opts ...grpc.CallOption) (*LyricsResponse, error) {
	out := new(LyricsResponse)
	err := c.cc.Invoke(ctx, "/lyrics.LyricsService/UpdateLyrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LyricsServiceServer is the server API for LyricsService service.
// All implementations must embed UnimplementedLyricsServiceServer
// for forward compatibility
type LyricsServiceServer interface {
	GetAllLyrics(context.Context, *Empty) (*LyricsResponseList, error)
	GetLyricsBySongId(context.Context, *LyricsBySongIdRequest) (*LyricsResponse, error)
	CreateLyrics(context.Context, *CreateLyricsRequest) (*LyricsResponse, error)
	UpdateLyrics(context.Context, *UpdateLyricsRequest) (*LyricsResponse, error)
	mustEmbedUnimplementedLyricsServiceServer()
}

// UnimplementedLyricsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLyricsServiceServer struct {
}

func (UnimplementedLyricsServiceServer) GetAllLyrics(context.Context, *Empty) (*LyricsResponseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllLyrics not implemented")
}
func (UnimplementedLyricsServiceServer) GetLyricsBySongId(context.Context, *LyricsBySongIdRequest) (*LyricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLyricsBySongId not implemented")
}
func (UnimplementedLyricsServiceServer) CreateLyrics(context.Context, *CreateLyricsRequest) (*LyricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLyrics not implemented")
}
func (UnimplementedLyricsServiceServer) UpdateLyrics(context.Context, *UpdateLyricsRequest) (*LyricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLyrics not implemented")
}
func (UnimplementedLyricsServiceServer) mustEmbedUnimplementedLyricsServiceServer() {}

// UnsafeLyricsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LyricsServiceServer will
// result in compilation errors.
type UnsafeLyricsServiceServer interface {
	mustEmbedUnimplementedLyricsServiceServer()
}

func RegisterLyricsServiceServer(s grpc.ServiceRegistrar, srv LyricsServiceServer) {
	s.RegisterService(&LyricsService_ServiceDesc, srv)
}

func _LyricsService_GetAllLyrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LyricsServiceServer).GetAllLyrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lyrics.LyricsService/GetAllLyrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LyricsServiceServer).GetAllLyrics(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LyricsService_GetLyricsBySongId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LyricsBySongIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LyricsServiceServer).GetLyricsBySongId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lyrics.LyricsService/GetLyricsBySongId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LyricsServiceServer).GetLyricsBySongId(ctx, req.(*LyricsBySongIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LyricsService_CreateLyrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLyricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LyricsServiceServer).CreateLyrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lyrics.LyricsService/CreateLyrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LyricsServiceServer).CreateLyrics(ctx, req.(*CreateLyricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LyricsService_UpdateLyrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLyricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LyricsServiceServer).UpdateLyrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lyrics.LyricsService/UpdateLyrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LyricsServiceServer).UpdateLyrics(ctx, req.(*UpdateLyricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LyricsService_ServiceDesc is the grpc.ServiceDesc for LyricsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LyricsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lyrics.LyricsService",
	HandlerType: (*LyricsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllLyrics",
			Handler:    _LyricsService_GetAllLyrics_Handler,
		},
		{
			MethodName: "GetLyricsBySongId",
			Handler:    _LyricsService_GetLyricsBySongId_Handler,
		},
		{
			MethodName: "CreateLyrics",
			Handler:    _LyricsService_CreateLyrics_Handler,
		},
		{
			MethodName: "UpdateLyrics",
			Handler:    _LyricsService_UpdateLyrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/lyrics.proto",
}
